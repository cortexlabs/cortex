version: 2.1

orbs:
  slack: circleci/slack@4.2.0

commands:
  install-go:
    steps:
      - run:
          name: Install Go
          command: |
            sudo rm -rf /usr/local/go
            wget https://dl.google.com/go/go1.15.12.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.15.12.linux-amd64.tar.gz
            rm -rf go*.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV

  quay-login:
    description: Log Docker agent into Quay.io
    steps:
      - run:
          name: Login to Quay
          command: docker login -u=$QUAY_USERNAME -p=$QUAY_PASSWORD quay.io

  install-e2e-dependencies:
    description: Install E2E Tests Dependencies
    steps:
      - run:
          name: Install Dependencies
          command: |
            pip install boto3 pyyaml awscli
            pip install -e ./test/e2e
            pip install https://s3-us-west-2.amazonaws.com/get-cortex/master/python/cortex-master.tar.gz

  run-e2e-tests:
    description: Creates a temporary cluster and runs the cortex E2E tests
    parameters:
      config:
        description: cluster config file path
        type: string
        default: ./cluster.yaml
      slack_channel:
        description: "slack channel where failed builds will be posted (should start with #)"
        type: string
        default: "#builds"
    steps:
      - run:
          name: Create Cluster
          command: cortex cluster up << parameters.config >> --configure-env cortex -y
      - run:
          name: Run E2E Tests
          no_output_timeout: 30m
          command: |
            pytest -v test/e2e/tests --env cortex --x86-nodegroups spot,cpu,gpu,inferentia --arm-nodegroups arm --skip-autoscaling --skip-load --skip-long-running
            pytest -v test/e2e/tests --env cortex --x86-nodegroups spot,cpu,gpu,inferentia -k test_autoscaling
            pytest -v test/e2e/tests --env cortex --x86-nodegroups spot,cpu,gpu,inferentia -k test_load
      - run:
          name: Delete Cluster
          command: cortex cluster down --config << parameters.config >> -y
          when: always
      - slack/notify:
          event: fail
          channel: << parameters.slack_channel >>
          template: basic_fail_1

jobs:
  lint:
    docker:
      - image: cimg/python:3.6
    resource_class: medium
    steps:
      - checkout
      - install-go
      - run:
          name: Install Linting Tools
          command: |
            go get -u -v golang.org/x/lint/golint
            go get -u -v github.com/kyoh86/looppointer/cmd/looppointer
            pip3 install black aiohttp
      - run:
          name: Lint
          command: make lint

  test:
    machine:
      image: ubuntu-1604:202104-01  # machine executor necessary to run go integration tests
    resource_class: medium
    steps:
      - checkout
      - install-go
      - run:
          name: Initialize Credentials
          command: |
            echo 'export AWS_ACCESS_KEY_ID=${NIGHTLY_AWS_ACCESS_KEY_ID}' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=${NIGHTLY_AWS_SECRET_ACCESS_KEY}' >> $BASH_ENV
      - run:
          name: Generate Cluster Config
          command: |
            mkdir -p dev/config
            cat \<< EOF > ./dev/config/cluster.yaml
            cluster_name: cortex-nightly
            region: us-east-1
            node_groups:
              - name: cpu
                instance_type: m5.large
                min_instances: 1
                max_instances: 1
            EOF
      - run:
          name: Go Tests
          command: make test

  build-and-upload-cli:
    docker:
      - image: cimg/python:3.6
    resource_class: medium
    steps:
      - checkout
      - install-go
      - run: pip install awscli
      - run: make ci-build-cli
      - run: make ci-build-and-upload-cli

  build-and-push-images-amd64:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Build CI Images (amd64)
          command: make ci-build-images-amd64
          no_output_timeout: 20m
      - quay-login
      - run:
          name: Push CI Images (amd64)
          command: make ci-push-images-amd64
          no_output_timeout: 20m

  build-and-push-images-arm64:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.large
    steps:
      - checkout
      - run:
          name: Build CI Images (arm64)
          command: make ci-build-images-arm64
          no_output_timeout: 20m
      - quay-login
      - run:
          name: Push CI Images (arm64)
          command: make ci-push-images-arm64
          no_output_timeout: 20m

  amend-images:
    docker:
      - image: cimg/python:3.6
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: medium
    steps:
      - setup_remote_docker
      - checkout
      - quay-login
      - run:
          name: Amend CI Images
          command: make ci-amend-images
          no_output_timeout: 20m

  e2e-tests:
    docker:
      - image: cimg/python:3.6
    environment:
      CORTEX_TEST_BATCH_S3_PATH: s3://cortex-nightly-artifacts/test/jobs
    steps:
      - setup_remote_docker
      - checkout
      - install-e2e-dependencies
      - run:
          name: Initialize Credentials
          command: |
            echo 'export AWS_ACCESS_KEY_ID=${NIGHTLY_AWS_ACCESS_KEY_ID}' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=${NIGHTLY_AWS_SECRET_ACCESS_KEY}' >> $BASH_ENV
      - run:
          name: Generate Cluster Config
          # using a variety of node groups to test the multi-instance-type cluster functionality
          command: |
            cat \<< EOF > ./cluster.yaml
            cluster_name: cortex-nightly
            region: us-east-1
            node_groups:
              - name: spot
                instance_type: t3.medium
                min_instances: 16
                max_instances: 16
                spot: true
              - name: cpu
                instance_type: c5.xlarge
                min_instances: 1
                max_instances: 2
              - name: gpu
                instance_type: g4dn.xlarge
                min_instances: 1
                max_instances: 2
              - name: inferentia
                instance_type: inf1.xlarge
                min_instances: 1
                max_instances: 2
              - name: arm
                instance_type: a1.large
                min_instances: 1
                max_instances: 2
            EOF
      - run:
          name: Create/Update AWS User policy
          command: eval $(python ./manager/cluster_config_env.py cluster.yaml) && python ./dev/create_user.py $CORTEX_CLUSTER_NAME 388176669058 $CORTEX_REGION > $BASH_ENV
      - run:
          name: Wait for new keys to propagate in AWS
          command: sleep 10
      - run:
          name: Verify configuration of credentials
          command: aws sts get-caller-identity | jq ".Arn" | grep "dev-cortex-nightly-us-east-1"
      - run-e2e-tests:
          config: ./cluster.yaml

workflows:
  build:
    jobs:
      - lint
      - test
      - build-and-deploy-approval:
          type: approval
          filters:
            branches:
              only:
                - /^[0-9]+\.[0-9]+$/
      - build-and-upload-cli:
          requires:
            - lint
            - test
            - build-and-deploy-approval
          filters:
            branches:
              only:
                - master
                - /^[0-9]+\.[0-9]+$/
      - build-and-push-images-amd64:
          requires:
            - lint
            - test
            - build-and-deploy-approval
          filters:
            branches:
              only:
                - master
                - /^[0-9]+\.[0-9]+$/
      - build-and-push-images-arm64:
          requires:
            - lint
            - test
            - build-and-deploy-approval
          filters:
            branches:
              only:
                - master
                - /^[0-9]+\.[0-9]+$/
      - amend-images:
          requires:
            - build-and-push-images-amd64
            - build-and-push-images-arm64
          filters:
            branches:
              only:
                - master
                - /^[0-9]+\.[0-9]+$/

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - e2e-tests
