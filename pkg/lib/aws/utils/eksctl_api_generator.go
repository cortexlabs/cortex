// +build ignore

/*
Copyright 2020 Cortex Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"bytes"
	"fmt"
	"github.com/iancoleman/strcase"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/weaveworks/eksctl/pkg/ctl/cmdutils"
	"github.com/weaveworks/eksctl/pkg/ctl/create"
	del "github.com/weaveworks/eksctl/pkg/ctl/delete"
	"github.com/weaveworks/eksctl/pkg/ctl/drain"
	"github.com/weaveworks/eksctl/pkg/ctl/enable"
	"github.com/weaveworks/eksctl/pkg/ctl/generate"
	"github.com/weaveworks/eksctl/pkg/ctl/get"
	"github.com/weaveworks/eksctl/pkg/ctl/scale"
	"github.com/weaveworks/eksctl/pkg/ctl/set"
	"github.com/weaveworks/eksctl/pkg/ctl/unset"
	"github.com/weaveworks/eksctl/pkg/ctl/update"
	"github.com/weaveworks/eksctl/pkg/ctl/upgrade"
	"github.com/weaveworks/eksctl/pkg/ctl/utils"
	"go/format"
	"strings"
	"text/template"
)

const templateString = `

type {{ .CommandNameCamelCase }}Args struct {
    {{ range $key, $value := .CommandArguments }}
        {{ ToCamelCase $key }} string{{ end }}
}

func (b *{{- .CommandNameCamelCase }}Args) buildArgs() []string {
    args := []string {
        {{ range $cmd := .CommandToExecute }}
            "{{ $cmd }}",{{end}}
	}

	v := reflect.ValueOf(b).Elem()

    for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--" + strcase.ToKebab(v.Type().Field(i).Name) + "=" + v.Field(i).Interface().(string))
		}
    }

	return args
}

func {{ .CommandNameCamelCase }}(b *{{- .CommandNameCamelCase }}Args, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}
`

type TemplateArgs struct {
	CommandNameCamelCase string
	CommandArguments     map[string]string
	CommandToExecute     []string
}

func CompileCommandTemplate(c *cobra.Command) {
	var commandName []string
	var commandOptions = make(map[string]string)
	var latestCommandOptions = make(map[string]string)
	var compileCommandTemplate func(*cobra.Command)

	compileCommandTemplate = func(x *cobra.Command) {
		commandName = append(commandName, x.Name())

		if x.HasFlags() {
			x.Flags().VisitAll(func(f *pflag.Flag) {
				commandOptions[f.Name] = f.DefValue
				latestCommandOptions[f.Name] = f.DefValue
			})
		}
		if x.HasPersistentFlags() {
			x.PersistentFlags().VisitAll(func(f *pflag.Flag) {
				commandOptions[f.Name] = f.DefValue
				latestCommandOptions[f.Name] = f.DefValue
			})
		}
		if x.HasSubCommands() {
			for _, y := range x.Commands() {
				latestCommandOptions = make(map[string]string)
				compileCommandTemplate(y)
			}
		} else {
			templateArgs := TemplateArgs{
				CommandNameCamelCase: strcase.ToCamel(strings.Join(commandName[:], " ")),
				CommandArguments:     commandOptions,
				CommandToExecute:     commandName,
			}
			parsedTemplate, err := template.New("template.tpl").Funcs(template.FuncMap{
				"ToCamelCase":      strcase.ToCamel,
				"ToLowerCamelCase": strcase.ToLowerCamel,
				"ToKebabCase":      strcase.ToKebab,
			}).Parse(templateString)
			var templateBytes bytes.Buffer

			if err != nil {
				panic(err)
			}

			err = parsedTemplate.Execute(&templateBytes, templateArgs)

			if err != nil {
				panic(err)
			}

			p, err := format.Source(templateBytes.Bytes())

			if err != nil {
				panic(err)
			}

			fmt.Println(string(p))
			commandName = commandName[:len(commandName)-1]
			for key := range latestCommandOptions {
				delete(commandOptions, key)
			}
		}
	}

	compileCommandTemplate(c)
}

func main() {
	fmt.Println("// Code generated by go generate; DO NOT EDIT.")
	fmt.Println("package aws")
	fmt.Println("import \"bytes\"")
	fmt.Println("import \"reflect\"")
	fmt.Println("import \"github.com/iancoleman/strcase\"")

	flagGrouping := cmdutils.NewGrouping()
	CompileCommandTemplate(create.Command(flagGrouping))
	CompileCommandTemplate(get.Command(flagGrouping))
	CompileCommandTemplate(update.Command(flagGrouping))
	CompileCommandTemplate(upgrade.Command(flagGrouping))
	CompileCommandTemplate(del.Command(flagGrouping))
	CompileCommandTemplate(set.Command(flagGrouping))
	CompileCommandTemplate(unset.Command(flagGrouping))
	CompileCommandTemplate(scale.Command(flagGrouping))
	CompileCommandTemplate(drain.Command(flagGrouping))
	CompileCommandTemplate(generate.Command(flagGrouping))
	CompileCommandTemplate(enable.Command(flagGrouping))
	CompileCommandTemplate(utils.Command(flagGrouping))
}
