// Code generated by go generate; DO NOT EDIT.

package aws

import "bytes"
import "reflect"
import "github.com/iancoleman/strcase"

type CreateClusterArgs struct {
	AlbIngressAccess      string
	AppmeshAccess         string
	AsgAccess             string
	AuthenticatorRoleArn  string
	AutoKubeconfig        string
	AwsApiTimeout         string
	CfnRoleArn            string
	ConfigFile            string
	ExternalDnsAccess     string
	Fargate               string
	FullEcrAccess         string
	InstallVpcControllers string
	Kubeconfig            string
	Managed               string
	MaxPodsPerNode        string
	Name                  string
	NodeAmi               string
	NodeAmiFamily         string
	NodeLabels            string
	NodePrivateNetworking string
	NodeSecurityGroups    string
	NodeType              string
	NodeVolumeSize        string
	NodeVolumeType        string
	NodeZones             string
	NodegroupName         string
	Nodes                 string
	NodesMax              string
	NodesMin              string
	Profile               string
	Region                string
	SetKubeconfigContext  string
	SshAccess             string
	SshPublicKey          string
	Tags                  string
	Timeout               string
	Version               string
	VpcCidr               string
	VpcFromKopsCluster    string
	VpcNatMode            string
	VpcPrivateSubnets     string
	VpcPublicSubnets      string
	WithoutNodegroup      string
	WriteKubeconfig       string
	Zones                 string
}

func (b *CreateClusterArgs) buildArgs() []string {
	args := []string{

		"create",
		"cluster",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func CreateCluster(b *CreateClusterArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type CreateFargateprofileArgs struct {
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Labels        string
	Name          string
	Namespace     string
	Profile       string
	Region        string
	Timeout       string
}

func (b *CreateFargateprofileArgs) buildArgs() []string {
	args := []string{

		"create",
		"fargateprofile",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func CreateFargateprofile(b *CreateFargateprofileArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type CreateIamidentitymappingArgs struct {
	Arn           string
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Group         string
	Name          string
	Profile       string
	Region        string
	Role          string
	Timeout       string
	Username      string
}

func (b *CreateIamidentitymappingArgs) buildArgs() []string {
	args := []string{

		"create",
		"iamidentitymapping",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func CreateIamidentitymapping(b *CreateIamidentitymappingArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type CreateIamserviceaccountArgs struct {
	Approve                         string
	AttachPolicyArn                 string
	AwsApiTimeout                   string
	CfnRoleArn                      string
	Cluster                         string
	ConfigFile                      string
	Exclude                         string
	Include                         string
	Name                            string
	Namespace                       string
	OverrideExistingServiceaccounts string
	Profile                         string
	Region                          string
	Timeout                         string
}

func (b *CreateIamserviceaccountArgs) buildArgs() []string {
	args := []string{

		"create",
		"iamserviceaccount",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func CreateIamserviceaccount(b *CreateIamserviceaccountArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type CreateNodegroupArgs struct {
	AlbIngressAccess      string
	AppmeshAccess         string
	AsgAccess             string
	AwsApiTimeout         string
	CfnRoleArn            string
	Cluster               string
	ConfigFile            string
	Exclude               string
	ExternalDnsAccess     string
	FullEcrAccess         string
	Include               string
	Managed               string
	MaxPodsPerNode        string
	Name                  string
	NodeAmi               string
	NodeAmiFamily         string
	NodeLabels            string
	NodePrivateNetworking string
	NodeSecurityGroups    string
	NodeType              string
	NodeVolumeSize        string
	NodeVolumeType        string
	NodeZones             string
	Nodes                 string
	NodesMax              string
	NodesMin              string
	Only                  string
	Profile               string
	Region                string
	SshAccess             string
	SshPublicKey          string
	Tags                  string
	Timeout               string
	UpdateAuthConfigmap   string
	Version               string
}

func (b *CreateNodegroupArgs) buildArgs() []string {
	args := []string{

		"create",
		"nodegroup",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func CreateNodegroup(b *CreateNodegroupArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type GetClusterArgs struct {
	AllRegions    string
	AwsApiTimeout string
	ChunkSize     string
	Name          string
	Output        string
	Profile       string
	Region        string
	Timeout       string
}

func (b *GetClusterArgs) buildArgs() []string {
	args := []string{

		"get",
		"cluster",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func GetCluster(b *GetClusterArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type GetFargateprofileArgs struct {
	AwsApiTimeout string
	ChunkSize     string
	Cluster       string
	ConfigFile    string
	Name          string
	Output        string
	Profile       string
	Region        string
	Timeout       string
}

func (b *GetFargateprofileArgs) buildArgs() []string {
	args := []string{

		"get",
		"fargateprofile",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func GetFargateprofile(b *GetFargateprofileArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type GetIamidentitymappingArgs struct {
	Arn           string
	AwsApiTimeout string
	ChunkSize     string
	Cluster       string
	ConfigFile    string
	Name          string
	Output        string
	Profile       string
	Region        string
	Role          string
	Timeout       string
}

func (b *GetIamidentitymappingArgs) buildArgs() []string {
	args := []string{

		"get",
		"iamidentitymapping",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func GetIamidentitymapping(b *GetIamidentitymappingArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type GetIamserviceaccountArgs struct {
	AwsApiTimeout string
	ChunkSize     string
	Cluster       string
	ConfigFile    string
	Name          string
	Namespace     string
	Output        string
	Profile       string
	Region        string
	Timeout       string
}

func (b *GetIamserviceaccountArgs) buildArgs() []string {
	args := []string{

		"get",
		"iamserviceaccount",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func GetIamserviceaccount(b *GetIamserviceaccountArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type GetLabelsArgs struct {
	AwsApiTimeout string
	Cluster       string
	Nodegroup     string
	Profile       string
	Region        string
	Timeout       string
}

func (b *GetLabelsArgs) buildArgs() []string {
	args := []string{

		"get",
		"labels",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func GetLabels(b *GetLabelsArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type GetNodegroupArgs struct {
	AwsApiTimeout string
	ChunkSize     string
	Cluster       string
	Name          string
	Output        string
	Profile       string
	Region        string
	Timeout       string
}

func (b *GetNodegroupArgs) buildArgs() []string {
	args := []string{

		"get",
		"nodegroup",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func GetNodegroup(b *GetNodegroupArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UpdateClusterArgs struct {
	Approve       string
	AwsApiTimeout string
	ConfigFile    string
	DryRun        string
	Name          string
	Profile       string
	Region        string
	Timeout       string
	Wait          string
}

func (b *UpdateClusterArgs) buildArgs() []string {
	args := []string{

		"update",
		"cluster",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UpdateCluster(b *UpdateClusterArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UpgradeNodegroupArgs struct {
	AwsApiTimeout     string
	Cluster           string
	ConfigFile        string
	KubernetesVersion string
	Name              string
	Profile           string
	Region            string
	Timeout           string
}

func (b *UpgradeNodegroupArgs) buildArgs() []string {
	args := []string{

		"upgrade",
		"nodegroup",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UpgradeNodegroup(b *UpgradeNodegroupArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type DeleteClusterArgs struct {
	AwsApiTimeout string
	CfnRoleArn    string
	ConfigFile    string
	Name          string
	Profile       string
	Region        string
	Timeout       string
	Wait          string
}

func (b *DeleteClusterArgs) buildArgs() []string {
	args := []string{

		"delete",
		"cluster",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func DeleteCluster(b *DeleteClusterArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type DeleteFargateprofileArgs struct {
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Name          string
	Profile       string
	Region        string
	Timeout       string
	Wait          string
}

func (b *DeleteFargateprofileArgs) buildArgs() []string {
	args := []string{

		"delete",
		"fargateprofile",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func DeleteFargateprofile(b *DeleteFargateprofileArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type DeleteIamidentitymappingArgs struct {
	All           string
	Arn           string
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Name          string
	Profile       string
	Region        string
	Role          string
	Timeout       string
}

func (b *DeleteIamidentitymappingArgs) buildArgs() []string {
	args := []string{

		"delete",
		"iamidentitymapping",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func DeleteIamidentitymapping(b *DeleteIamidentitymappingArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type DeleteIamserviceaccountArgs struct {
	Approve       string
	AwsApiTimeout string
	CfnRoleArn    string
	Cluster       string
	ConfigFile    string
	Exclude       string
	Include       string
	Name          string
	Namespace     string
	OnlyMissing   string
	Profile       string
	Region        string
	Timeout       string
	Wait          string
}

func (b *DeleteIamserviceaccountArgs) buildArgs() []string {
	args := []string{

		"delete",
		"iamserviceaccount",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func DeleteIamserviceaccount(b *DeleteIamserviceaccountArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type DeleteNodegroupArgs struct {
	Approve             string
	AwsApiTimeout       string
	CfnRoleArn          string
	Cluster             string
	ConfigFile          string
	Drain               string
	Exclude             string
	Include             string
	Name                string
	Only                string
	OnlyMissing         string
	Profile             string
	Region              string
	Timeout             string
	UpdateAuthConfigmap string
	Wait                string
}

func (b *DeleteNodegroupArgs) buildArgs() []string {
	args := []string{

		"delete",
		"nodegroup",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func DeleteNodegroup(b *DeleteNodegroupArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type SetLabelsArgs struct {
	AwsApiTimeout string
	Cluster       string
	Labels        string
	Nodegroup     string
	Profile       string
	Region        string
	Timeout       string
}

func (b *SetLabelsArgs) buildArgs() []string {
	args := []string{

		"set",
		"labels",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func SetLabels(b *SetLabelsArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UnsetLabelsArgs struct {
	AwsApiTimeout string
	Cluster       string
	Labels        string
	Nodegroup     string
	Profile       string
	Region        string
	Timeout       string
}

func (b *UnsetLabelsArgs) buildArgs() []string {
	args := []string{

		"unset",
		"labels",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UnsetLabels(b *UnsetLabelsArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type ScaleNodegroupArgs struct {
	AwsApiTimeout string
	CfnRoleArn    string
	Cluster       string
	Name          string
	Nodes         string
	Profile       string
	Region        string
	Timeout       string
}

func (b *ScaleNodegroupArgs) buildArgs() []string {
	args := []string{

		"scale",
		"nodegroup",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func ScaleNodegroup(b *ScaleNodegroupArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type DrainNodegroupArgs struct {
	Approve       string
	AwsApiTimeout string
	CfnRoleArn    string
	Cluster       string
	ConfigFile    string
	Exclude       string
	Include       string
	Name          string
	Only          string
	OnlyMissing   string
	Profile       string
	Region        string
	Timeout       string
	Undo          string
}

func (b *DrainNodegroupArgs) buildArgs() []string {
	args := []string{

		"drain",
		"nodegroup",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func DrainNodegroup(b *DrainNodegroupArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type GenerateProfileArgs struct {
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	GitBranch     string
	GitUrl        string
	Name          string
	Profile       string
	ProfilePath   string
	Region        string
}

func (b *GenerateProfileArgs) buildArgs() []string {
	args := []string{

		"generate",
		"profile",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func GenerateProfile(b *GenerateProfileArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type EnableProfileArgs struct {
	AwsApiTimeout        string
	Cluster              string
	ConfigFile           string
	GitBranch            string
	GitEmail             string
	GitPrivateSshKeyPath string
	GitUrl               string
	GitUser              string
	Name                 string
	Profile              string
	Region               string
	Revision             string
	Timeout              string
}

func (b *EnableProfileArgs) buildArgs() []string {
	args := []string{

		"enable",
		"profile",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func EnableProfile(b *EnableProfileArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type EnableRepoArgs struct {
	Amend                string
	AwsApiTimeout        string
	Cluster              string
	ConfigFile           string
	GitBranch            string
	GitEmail             string
	GitFluxSubdir        string
	GitLabel             string
	GitPaths             string
	GitPrivateSshKeyPath string
	GitUrl               string
	GitUser              string
	Namespace            string
	Profile              string
	Region               string
	Timeout              string
	WithHelm             string
}

func (b *EnableRepoArgs) buildArgs() []string {
	args := []string{

		"enable",
		"repo",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func EnableRepo(b *EnableRepoArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsAssociateIamOidcProviderArgs struct {
	Approve       string
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Name          string
	Profile       string
	Region        string
}

func (b *UtilsAssociateIamOidcProviderArgs) buildArgs() []string {
	args := []string{

		"utils",
		"associate-iam-oidc-provider",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsAssociateIamOidcProvider(b *UtilsAssociateIamOidcProviderArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsDescribeStacksArgs struct {
	All           string
	AwsApiTimeout string
	Cluster       string
	Events        string
	Name          string
	Profile       string
	Region        string
	Timeout       string
	Trail         string
}

func (b *UtilsDescribeStacksArgs) buildArgs() []string {
	args := []string{

		"utils",
		"describe-stacks",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsDescribeStacks(b *UtilsDescribeStacksArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsInstallVpcControllersArgs struct {
	Approve       string
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Name          string
	Profile       string
	Region        string
	Timeout       string
}

func (b *UtilsInstallVpcControllersArgs) buildArgs() []string {
	args := []string{

		"utils",
		"install-vpc-controllers",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsInstallVpcControllers(b *UtilsInstallVpcControllersArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsNodegroupHealthArgs struct {
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Name          string
	Profile       string
	Region        string
	Timeout       string
}

func (b *UtilsNodegroupHealthArgs) buildArgs() []string {
	args := []string{

		"utils",
		"nodegroup-health",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsNodegroupHealth(b *UtilsNodegroupHealthArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsSetPublicAccessCidrsArgs struct {
	Approve       string
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Profile       string
	Region        string
	Timeout       string
}

func (b *UtilsSetPublicAccessCidrsArgs) buildArgs() []string {
	args := []string{

		"utils",
		"set-public-access-cidrs",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsSetPublicAccessCidrs(b *UtilsSetPublicAccessCidrsArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsUpdateAwsNodeArgs struct {
	Approve       string
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Name          string
	Profile       string
	Region        string
	Timeout       string
}

func (b *UtilsUpdateAwsNodeArgs) buildArgs() []string {
	args := []string{

		"utils",
		"update-aws-node",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsUpdateAwsNode(b *UtilsUpdateAwsNodeArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsUpdateClusterEndpointsArgs struct {
	Approve       string
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Name          string
	PrivateAccess string
	Profile       string
	PublicAccess  string
	Region        string
	Timeout       string
}

func (b *UtilsUpdateClusterEndpointsArgs) buildArgs() []string {
	args := []string{

		"utils",
		"update-cluster-endpoints",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsUpdateClusterEndpoints(b *UtilsUpdateClusterEndpointsArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsUpdateClusterLoggingArgs struct {
	Approve       string
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	DisableTypes  string
	EnableTypes   string
	Name          string
	Profile       string
	Region        string
	Timeout       string
}

func (b *UtilsUpdateClusterLoggingArgs) buildArgs() []string {
	args := []string{

		"utils",
		"update-cluster-logging",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsUpdateClusterLogging(b *UtilsUpdateClusterLoggingArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsUpdateClusterStackArgs struct {
}

func (b *UtilsUpdateClusterStackArgs) buildArgs() []string {
	args := []string{

		"utils",
		"update-cluster-stack",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsUpdateClusterStack(b *UtilsUpdateClusterStackArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsUpdateCorednsArgs struct {
	Approve       string
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Name          string
	Profile       string
	Region        string
	Timeout       string
}

func (b *UtilsUpdateCorednsArgs) buildArgs() []string {
	args := []string{

		"utils",
		"update-coredns",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsUpdateCoredns(b *UtilsUpdateCorednsArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsUpdateKubeProxyArgs struct {
	Approve       string
	AwsApiTimeout string
	Cluster       string
	ConfigFile    string
	Name          string
	Profile       string
	Region        string
	Timeout       string
}

func (b *UtilsUpdateKubeProxyArgs) buildArgs() []string {
	args := []string{

		"utils",
		"update-kube-proxy",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsUpdateKubeProxy(b *UtilsUpdateKubeProxyArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsWaitNodesArgs struct {
	Kubeconfig string
	NodesMin   string
	Timeout    string
}

func (b *UtilsWaitNodesArgs) buildArgs() []string {
	args := []string{

		"utils",
		"wait-nodes",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsWaitNodes(b *UtilsWaitNodesArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}

type UtilsWriteKubeconfigArgs struct {
	AuthenticatorRoleArn string
	AutoKubeconfig       string
	AwsApiTimeout        string
	Cluster              string
	Kubeconfig           string
	Name                 string
	Profile              string
	Region               string
	SetKubeconfigContext string
	Timeout              string
}

func (b *UtilsWriteKubeconfigArgs) buildArgs() []string {
	args := []string{

		"utils",
		"write-kubeconfig",
	}

	v := reflect.ValueOf(b).Elem()

	for i := 0; i < v.NumField(); i++ {
		if v.Field(i).Interface().(string) != "" {
			args = append(args, "--"+strcase.ToKebab(v.Type().Field(i).Name)+"="+v.Field(i).Interface().(string))
		}
	}

	return args
}

func UtilsWriteKubeconfig(b *UtilsWriteKubeconfigArgs, buf *bytes.Buffer) error {
	rootCmd.SetOut(buf)
	rootCmd.SetErr(buf)
	rootCmd.SetArgs(b.buildArgs())
	_, err := rootCmd.ExecuteC()

	return err
}
