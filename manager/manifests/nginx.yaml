# Copyright 2019 Cortex Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx
  namespace: $CORTEX_NAMESPACE
---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nginx
  namespace: $CORTEX_NAMESPACE
rules:
  - apiGroups: [""]
    resources: [endpoints, pods, secrets]
    verbs: [list, watch]
  - apiGroups: [""]
    resources: [nodes, services, ingresses]
    verbs: [get, list, watch]
  - apiGroups: [""]
    resources: [events]
    verbs: [create, patch]
  - apiGroups: ["extensions"]
    resources: [ingresses]
    verbs: [get, list, watch]
  - apiGroups: ["extensions"]
    resources: [ingresses/status]
    verbs: [update]
  - apiGroups: [""]
    resources: [pods, secrets, namespaces, endpoints]
    verbs: [get]
  - apiGroups: [""]
    resources: [configmaps]
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-operator"
      - "ingress-controller-leader-apis"
    verbs: [get, update]
  - apiGroups: [""]
    resources: [configmaps]
    verbs: [get, list, watch, create]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx
  namespace: $CORTEX_NAMESPACE
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx
subjects:
  - kind: ServiceAccount
    name: nginx
    namespace: $CORTEX_NAMESPACE
---

kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: $CORTEX_NAMESPACE
data:
  use-proxy-protocol: "true"
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-backend-operator
  labels:
    app.kubernetes.io/name: nginx-backend-operator
    app.kubernetes.io/part-of: ingress-nginx
  namespace: $CORTEX_NAMESPACE
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-backend-operator
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-backend-operator
        app.kubernetes.io/part-of: ingress-nginx
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: nginx-backend-operator
        # Any image is permissible as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: $CORTEX_IMAGE_NGINX_BACKEND
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---

apiVersion: v1
kind: Service
metadata:
  name: nginx-backend-operator
  namespace: $CORTEX_NAMESPACE
  labels:
    app.kubernetes.io/name: nginx-backend-operator
    app.kubernetes.io/part-of: ingress-nginx
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app.kubernetes.io/name: nginx-backend-operator
    app.kubernetes.io/part-of: ingress-nginx
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-controller-operator
  namespace: $CORTEX_NAMESPACE
  labels:
    app.kubernetes.io/name: nginx-controller-operator
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-controller-operator
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-controller-operator
        app.kubernetes.io/part-of: ingress-nginx
    spec:
      serviceAccountName: nginx
      containers:
        - name: nginx-controller
          image: $CORTEX_IMAGE_NGINX_CONTROLLER
          imagePullPolicy: Always
          args:
            - /nginx-ingress-controller
            - --watch-namespace=$CORTEX_NAMESPACE
            - --default-backend-service=$CORTEX_NAMESPACE/nginx-backend-operator
            - --configmap=$CORTEX_NAMESPACE/nginx-configuration
            - --publish-service=$CORTEX_NAMESPACE/nginx-controller-operator
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --ingress-class=operator
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - name: http
            containerPort: 80
          - name: https
            containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
---

kind: Service
apiVersion: v1
metadata:
  name: nginx-controller-operator
  namespace: $CORTEX_NAMESPACE
  labels:
    app.kubernetes.io/name: nginx-controller-operator
    app.kubernetes.io/part-of: ingress-nginx
  annotations:
    # Enable PROXY protocol
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: '*'
    # Ensure the ELB idle timeout is less than nginx keep-alive timeout. By default,
    # NGINX keep-alive is set to 75s. If using WebSockets, the value will need to be
    # increased to '3600' to avoid any potential issues.
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '60'
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: nginx-controller-operator
    app.kubernetes.io/part-of: ingress-nginx
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: https
    port: 443
    targetPort: https
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-backend-apis
  labels:
    app.kubernetes.io/name: nginx-backend-apis
    app.kubernetes.io/part-of: ingress-nginx
  namespace: $CORTEX_NAMESPACE
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-backend-apis
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-backend-apis
        app.kubernetes.io/part-of: ingress-nginx
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: nginx-backend-apis
        # Any image is permissible as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: $CORTEX_IMAGE_NGINX_BACKEND
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---

apiVersion: v1
kind: Service
metadata:
  name: nginx-backend-apis
  namespace: $CORTEX_NAMESPACE
  labels:
    app.kubernetes.io/name: nginx-backend-apis
    app.kubernetes.io/part-of: ingress-nginx
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app.kubernetes.io/name: nginx-backend-apis
    app.kubernetes.io/part-of: ingress-nginx
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-controller-apis
  namespace: $CORTEX_NAMESPACE
  labels:
    app.kubernetes.io/name: nginx-backend-apis
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-backend-apis
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-backend-apis
        app.kubernetes.io/part-of: ingress-nginx
    spec:
      serviceAccountName: nginx
      containers:
        - name: nginx-controller
          image: $CORTEX_IMAGE_NGINX_CONTROLLER
          imagePullPolicy: Always
          args:
            - /nginx-ingress-controller
            - --watch-namespace=$CORTEX_NAMESPACE
            - --default-backend-service=$CORTEX_NAMESPACE/nginx-backend-apis
            - --configmap=$CORTEX_NAMESPACE/nginx-configuration
            - --publish-service=$CORTEX_NAMESPACE/nginx-backend-apis
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --ingress-class=apis
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            # www-data -> 33
            runAsUser: 33
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - name: http
            containerPort: 80
          - name: https
            containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
---

kind: Service
apiVersion: v1
metadata:
  name: nginx-controller-apis
  namespace: $CORTEX_NAMESPACE
  labels:
    app.kubernetes.io/name: nginx-backend-apis
    app.kubernetes.io/part-of: ingress-nginx
  annotations:
    # Enable PROXY protocol
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: '*'
    # Ensure the ELB idle timeout is less than nginx keep-alive timeout. By default,
    # NGINX keep-alive is set to 75s. If using WebSockets, the value will need to be
    # increased to '3600' to avoid any potential issues.
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '60'
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: nginx-backend-apis
    app.kubernetes.io/part-of: ingress-nginx
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: https
    port: 443
    targetPort: https
