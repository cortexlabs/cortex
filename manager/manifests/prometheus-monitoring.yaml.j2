# Copyright 2021 Cortex Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{% if env.get("CORTEX_DEV_HAS_CONTROL_PLANE_DASHBOARD") == "true" %}
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-file-config
  namespace: default
data:
  prometheus.env.yaml: |
    scrape_configs:
    - job_name: "kubernetes-apiservers"

      kubernetes_sd_configs:
        - role: endpoints

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & authorization config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # If your node certificates are self-signed or use a different CA to the
        # master CA, then disable certificate verification below. Note that
        # certificate verification is an integral part of a secure infrastructure
        # so this should only be disabled in a controlled environment. You can
        # disable certificate verification by uncommenting the line below.
        #
        # insecure_skip_verify: true
      authorization:
        credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      # Keep only the default/kubernetes service endpoints for the https port. This
      # will add targets for each API server which Kubernetes adds an endpoint to
      # the default/kubernetes service.
      relabel_configs:
        - source_labels:
            [
              __meta_kubernetes_namespace,
              __meta_kubernetes_service_name,
              __meta_kubernetes_endpoint_port_name,
            ]
          action: keep
          regex: default;kubernetes;https

---
{% endif %}

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ssd
volumeBindingMode: WaitForFirstConsumer
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2

---

apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: prometheus
spec:
  image: {{ config['image_prometheus'] }}
  serviceAccountName: prometheus
  nodeSelector:
    prometheus: "true"
  tolerations:
    - key: prometheus
      operator: Exists
      effect: NoSchedule
  podMonitorSelector:
    matchExpressions:
      - key: "monitoring.cortex.dev"
        operator: "Exists"
  serviceMonitorSelector:
    matchExpressions:
      - key: "monitoring.cortex.dev"
        operator: "Exists"
  ruleSelector:
    matchLabels:
      prometheus: k8s
  resources:
    requests:
      memory: 400Mi
  enableAdminAPI: false
  storage:
    volumeClaimTemplate:
      spec:
        storageClassName: ssd
        resources:
          requests:
            storage: 40Gi
  {% if env.get("CORTEX_DEV_HAS_CONTROL_PLANE_DASHBOARD") == "true" %}
  volumes:
  - configMap:
      items:
      - key: prometheus.env.yaml
        path: prometheus.env.yaml
      name: prometheus-file-config
    name: prometheus-file-config
  volumeMounts:
  - mountPath: /etc/prometheus/config_out/prometheus.env.yaml
    name: prometheus-file-config
    subPath: prometheus.env.yaml
  {% endif %}
  retention: 2w
  retentionSize: 35GB
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [ "" ]
    resources:
      - nodes
      - nodes/metrics
      - services
      - endpoints
      - pods
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "" ]
    resources:
      - configmaps
    verbs: [ "get" ]
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs: [ "get", "list", "watch" ]
  - nonResourceURLs: [ "/metrics" ]
    verbs: [ "get" ]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: default

---

apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    prometheus: prometheus

---

apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: istio-stats
  labels:
    monitoring.cortex.dev: "istio"
spec:
  selector:
    matchExpressions:
      - { key: prometheus-ignore, operator: DoesNotExist }
      - { key: istio, operator: Exists }
      - { key: release, operator: In, values: [ "istio" ]}
  namespaceSelector:
    any: true
  jobLabel: envoy-stats
  podMetricsEndpoints:
    - path: /stats/prometheus
      interval: 15s
      relabelings:
        - action: keep
          sourceLabels: [ __meta_kubernetes_pod_container_name ]
          regex: "istio-proxy"
        - action: keep
          sourceLabels: [ __meta_kubernetes_pod_annotationpresent_prometheus_io_scrape ]
        - sourceLabels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          targetLabel: __address__
        - action: labeldrop
          regex: "__meta_kubernetes_pod_label_(.+)"
        - sourceLabels: [ __meta_kubernetes_namespace ]
          action: replace
          targetLabel: namespace
        - sourceLabels: [ __meta_kubernetes_pod_name ]
          action: replace
          targetLabel: pod_name
      metricRelabelings:
        - action: keep
          sourceLabels: [__name__]
          regex: "istio_(\
            requests_total|\
            request_duration_milliseconds_bucket|\
            request_duration_milliseconds_sum|\
            request_duration_milliseconds_count\
            )"
        - action: labelkeep
          regex: (__name__|destination_service|response_code|le)

---

apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: proxy-stats
  labels:
    monitoring.cortex.dev: "proxy"
spec:
  selector:
    matchLabels:
      apiKind: RealtimeAPI
    matchExpressions:
      - { key: prometheus-ignore, operator: DoesNotExist }
  namespaceSelector:
    any: true
  jobLabel: proxy-stats
  podMetricsEndpoints:
    - path: /metrics
      scheme: http
      interval: 10s
      port: admin
      relabelings:
        - action: keep
          sourceLabels: [ __meta_kubernetes_pod_container_name ]
          regex: "proxy"
        - sourceLabels: [ __meta_kubernetes_pod_label_apiName ]
          action: replace
          targetLabel: api_name
        - sourceLabels: [ __meta_kubernetes_pod_label_apiKind ]
          action: replace
          targetLabel: api_kind
        - sourceLabels: [ __meta_kubernetes_pod_label_apiID ]
          action: replace
          targetLabel: api_id
        - sourceLabels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          targetLabel: __address__
        - action: labeldrop
          regex: "__meta_kubernetes_pod_label_(.+)"
        - sourceLabels: [ __meta_kubernetes_namespace ]
          action: replace
          targetLabel: namespace
        - sourceLabels: [ __meta_kubernetes_pod_name ]
          action: replace
          targetLabel: pod_name
      metricRelabelings:
        - action: keep
          sourceLabels: [__name__]
          regex: "cortex_(.+)"

---

apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: async-stats
  labels:
    monitoring.cortex.dev: "dequeuer-async"
spec:
  selector:
    matchLabels:
      apiKind: AsyncAPI
      cortex.dev/async: api
    matchExpressions:
      - { key: prometheus-ignore, operator: DoesNotExist }
  namespaceSelector:
    any: true
  jobLabel: async-stats
  podMetricsEndpoints:
    - path: /metrics
      scheme: http
      interval: 10s
      port: admin
      relabelings:
        - action: keep
          sourceLabels: [ __meta_kubernetes_pod_container_name ]
          regex: "dequeuer"
        - sourceLabels: [ __meta_kubernetes_pod_label_apiName ]
          action: replace
          targetLabel: api_name
        - sourceLabels: [ __meta_kubernetes_pod_label_apiKind ]
          action: replace
          targetLabel: api_kind
        - sourceLabels: [ __meta_kubernetes_pod_label_apiID ]
          action: replace
          targetLabel: api_id
        - sourceLabels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          targetLabel: __address__
        - action: labeldrop
          regex: "__meta_kubernetes_pod_label_(.+)"
        - sourceLabels: [ __meta_kubernetes_namespace ]
          action: replace
          targetLabel: namespace
        - sourceLabels: [ __meta_kubernetes_pod_name ]
          action: replace
          targetLabel: pod_name
      metricRelabelings:
        - action: keep
          sourceLabels: [__name__]
          regex: "cortex_(.+)"

---

apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: prometheus-statsd-exporter
  labels:
    name: prometheus-statsd-exporter
    monitoring.cortex.dev: "statsd-exporter"
spec:
  jobLabel: "statsd-exporter"
  podMetricsEndpoints:
    - port: metrics
      scheme: http
      path: /metrics
      interval: 20s
      metricRelabelings:
        - action: keep
          sourceLabels: [__name__]
          regex: "cortex_(.+)"
  namespaceSelector:
    any: true
  selector:
    matchLabels:
      name: prometheus-statsd-exporter

---

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: operator
  labels:
    name: operator
    monitoring.cortex.dev: "operator"
spec:
  jobLabel: "operator"
  endpoints:
    - port: http
      scheme: http
      path: /metrics
      interval: 10s
      metricRelabelings:
        - action: keep
          sourceLabels: [__name__]
          regex: "cortex_(.+)"
  namespaceSelector:
    any: true
  selector:
    matchLabels:
      cortex.dev/name: operator
