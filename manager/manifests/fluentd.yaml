# Copyright 2019 Cortex Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: $CORTEX_NAMESPACE
  labels:
    app: fluentd
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: fluentd
  namespace: $CORTEX_NAMESPACE
rules:
- apiGroups: [""]
  resources:
    - namespaces
    - pods
    - pods/logs
  verbs: [get, list, watch]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: fluentd
  namespace: $CORTEX_NAMESPACE
subjects:
- kind: ServiceAccount
  name: fluentd
  namespace: $CORTEX_NAMESPACE
roleRef:
  kind: ClusterRole
  name: fluentd
  apiGroup: rbac.authorization.k8s.io
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd
  namespace: $CORTEX_NAMESPACE
data:
  fluent.conf: |
    @include containers.conf

    <match fluent.**>
      @type null
    </match>
  containers.conf: |
    <source>
      @type tail
      @id in_tail_container_logs
      @label @containers
      path /var/log/containers/**_${CORTEX_NAMESPACE}_**.log
      pos_file /var/log/fluentd-containers.log.pos
      tag *
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <label @containers>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata
      </filter>

      <match **>
        @type route
        <route **>
          copy
          @label @by_pod
        </route>
        <route **>
          copy
          @label @by_endpoint
        </route>
      </match>
    </label>

    <label @by_pod>
      <filter **>
        @type record_transformer
        @id filter_containers_stream_transformer
        <record>
          stream_name ${tag_parts[3]}
        </record>
        remove_keys kubernetes,docker,stream
      </filter>
      <match **>
        @type cloudwatch_logs
        region "#{ENV['AWS_REGION']}"
        log_group_name "#{ENV['LOG_GROUP_NAME']}"
        log_stream_name_key stream_name
        remove_log_stream_name_key true
        auto_create_stream true
        <buffer>
          flush_interval 5
          chunk_limit_size 2m
          queued_chunks_limit_size 32
          retry_forever true
        </buffer>
      </match>
    </label>

    <label @by_endpoint>
      <filter **>
        @type record_transformer
        enable_ruby
        <record>
          workload_type ${record.dig("kubernetes", "labels", "workloadType") || "unknown"}
        </record>
        remove_keys docker,stream
      </filter>

      <filter **>
        @type grep
        regexp1 workload_type api
      </filter>
      <filter **>
        @type record_transformer
        enable_ruby
        <record>
          pod_name ${record.dig("kubernetes", "pod_name")}
          container_name ${record.dig("kubernetes", "container_name")}
          workload_id ${record.dig("kubernetes", "labels", "workloadID")}
          stream_name ${record.dig("kubernetes", "labels", "appName")}.${record.dig("kubernetes", "labels", "apiName")}
        </record>
        remove_keys kubernetes,api_name,app_name,workload_type
      </filter>
      <match **>
        @type cloudwatch_logs
        @id out_cloudwatch_logs_endpoints
        region "#{ENV['AWS_REGION']}"
        log_group_name "#{ENV['LOG_GROUP_NAME']}"
        log_stream_name_key stream_name
        remove_log_stream_name_key true
        auto_create_stream true
        <buffer>
          flush_interval 5
          chunk_limit_size 2m
          queued_chunks_limit_size 32
          retry_forever true
        </buffer>
      </match>
    </label>
---

apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: $CORTEX_NAMESPACE
spec:
  template:
    metadata:
      labels:
        app: fluentd
    spec:
      serviceAccountName: fluentd
      initContainers:
        - name: copy-fluentd-config
          image: busybox
          command: ['sh', '-c', 'cp /config-volume/* /etc/fluentd']
          volumeMounts:
            - name: config-volume
              mountPath: /config-volume
            - name: config
              mountPath: /etc/fluentd
      containers:
      - name: fluentd
        image: $CORTEX_IMAGE_FLUENTD
        imagePullPolicy: Always
        env:
        - name: AWS_REGION
          value: $CORTEX_REGION
        - name: LOG_GROUP_NAME
          value: $CORTEX_LOG_GROUP
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: AWS_SECRET_ACCESS_KEY
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: config
          mountPath: /fluentd/etc
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: config
        emptyDir: {}
      - name: config-volume
        configMap:
          name: fluentd
