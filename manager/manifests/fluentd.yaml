# Copyright 2020 Cortex Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd
  namespace: default
  labels:
    app: fluentd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluentd
  namespace: default
rules:
  - apiGroups: [""]
    resources:
      - namespaces
      - pods
      - pods/logs
    verbs: [get, list, watch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluentd
  namespace: default
subjects:
  - kind: ServiceAccount
    name: fluentd
    namespace: default
roleRef:
  kind: ClusterRole
  name: fluentd
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: fluentd
value: 1000
globalDefault: false
description: "This priority class should be used for fluentd daemonset only."

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd
  namespace: default
data:
  fluent.conf: |
    @include containers.conf

    <match fluent.**>
      @type null
    </match>
  containers.conf: |
    <source>
      @type tail
      @id in_tail_container_logs
      @label @containers
      path /var/log/containers/*.log
      exclude_path ["/var/log/containers/fluentd*.log"]
      pos_file /var/log/containers.log.pos
      tag *
      read_from_head true
      refresh_interval 1
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <source>
      @type tail
      @id in_tail_fluentd_logs
      @label @fluentd
      path /var/log/containers/fluentd-*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag *
      read_from_head true
      refresh_interval 1
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>

    <label @fluentd>
      <filter **>
        @type grep
        <exclude>
          key log
          pattern /Aws::CloudWatchLogs::Client 200/
        </exclude>
      </filter>
      <filter **>
        @type grep
        <exclude>
          key log
          pattern /^\s*$/
        </exclude>
      </filter>
      <match **>
        @type relabel
        @label @containers
      </match>
    </label>

    <label @containers>
      <filter **>
        @type kubernetes_metadata
        @id filter_kube_metadata
        skip_namespace_metadata false
        skip_container_metadata true
        cache_ttl -1
        watch false
      </filter>

      <filter **>
        @type record_modifier
        <record>
          group_name  ${(record["kubernetes"]["labels"].has_key?("apiName") && record.dig("kubernetes", "container_name") != "request-monitor") ? "#{ENV['LOG_GROUP_NAME']}/#{record['kubernetes']['labels']['apiName']}" : ENV['LOG_GROUP_NAME']}
          stream_name  ${record["kubernetes"]["labels"].has_key?("jobID") ? "#{record["kubernetes"]["labels"]["jobID"]}_#{record.dig("kubernetes", "pod_name")}_#{record.dig("kubernetes", "container_name")}" : "#{record["kubernetes"]["labels"]["predictorID"]}_#{record.dig("kubernetes", "pod_name")}_#{record.dig("kubernetes", "container_name")}"}
          log ${record.dig("log").rstrip}
        </record>
        remove_keys kubernetes,docker,stream
      </filter>
      <match **>
        @type cloudwatch_logs
        region "#{ENV['AWS_REGION']}"
        log_group_name_key group_name
        log_stream_name_key stream_name
        log_group_aws_tags ${CORTEX_TAGS_JSON}
        remove_log_stream_name_key true
        remove_log_group_name_key true
        auto_create_stream true
        <buffer>
          flush_interval 2
          chunk_limit_size 2m
          queued_chunks_limit_size 32
          retry_forever true
        </buffer>
      </match>
    </label>

    <match **>
      @type null
    </match>
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: default
spec:
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: fluentd
  template:
    metadata:
      labels:
        app: fluentd
    spec:
      serviceAccountName: fluentd
      priorityClassName: fluentd
      initContainers:
        - name: copy-fluentd-config
          image: busybox
          command: ["sh", "-c", "cp /config-volume/* /etc/fluentd"]
          volumeMounts:
            - name: config-volume
              mountPath: /config-volume
            - name: config
              mountPath: /etc/fluentd
      containers:
        - name: fluentd
          image: $CORTEX_IMAGE_FLUENTD
          imagePullPolicy: Always
          env:
            - name: AWS_REGION
              value: $CORTEX_REGION
            - name: LOG_GROUP_NAME
              value: $CORTEX_CLUSTER_NAME
            - name: K8S_NODE_NAME # used by fluentd to avoid a k8s query
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - secretRef:
                name: aws-credentials
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
            limits:
              memory: 200Mi
          volumeMounts:
            - name: varlog
              mountPath: /var/log
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: config
              mountPath: /fluentd/etc
      tolerations:
        - key: aws.amazon.com/neuron
          operator: Exists
          effect: NoSchedule
        - key: nvidia.com/gpu
          operator: Exists
          effect: NoSchedule
        - key: workload
          operator: Exists
          effect: NoSchedule
      terminationGracePeriodSeconds: 30
      volumes:
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: config
          emptyDir: {}
        - name: config-volume
          configMap:
            name: fluentd
